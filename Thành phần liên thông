#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> adj[1001];
bool visited[1001];
vector<vector<int>> components;

void DFS(int u, vector<int>& component) {
    visited[u] = true;
    component.push_back(u);
    for (int v : adj[u]) {
        if (!visited[v]) {
            DFS(v, component);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    for (int i = 1; i <= n; i++) {
        sort(adj[i].begin(), adj[i].end());
    }
    for (int i = 1; i <= n; i++) {
        if (!visited[i]) {
            vector<int> component;
            DFS(i, component);
            sort(component.begin(), component.end());
            components.push_back(component);
        }
    }
    cout << components.size() << endl;
    for (auto comp : components) {
        for (int u : comp) {
            cout << u << " ";
        }
        cout << endl;
    }
}
